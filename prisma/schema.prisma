generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(uuid())
  email        String    @unique
  firstName    String
  lastName     String?
  username     String?
  phone_number String?
  password     String?
  entryToken   String?
  token        String?
  profileImg   String?
  role         UserRole
  profile      Profile?
  bookings     Booking[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  bookingNotes Booking_note[]

  @@map("users")
}

model Profile {
  id            String   @id @default(uuid())
  date_of_birth DateTime @db.Date
  address       String
  city          String
  country       String
  zip_code      String
  user          User     @relation(fields: [user_id], references: [id])
  user_id       String   @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("profiles")
}

model Site {
  id           String  @id @default(uuid())
  name         String
  image        String?
  // businessHours OpenHours?
  openingHours String
  closingHours String
  status       Boolean @default(true)

  rooms     Room[]
  menuItems MenuItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sites")
}

model Room {
  id        String      @id @default(uuid())
  name      String
  image     String?
  capacity  Int
  available Boolean     @default(true)
  pricing   Float?
  slots     OpenHours[]
  bookings  Booking[]
  site      Site?       @relation(fields: [siteId], references: [id])
  siteId    String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("rooms")
}

model Booking {
  id          String        @id @default(uuid())
  date        DateTime //@db.Date
  startTime   DateTime
  endTime     DateTime
  status      BookingStatus @default(AVAILABLE)
  room        Room?         @relation(fields: [roomId], references: [id])
  roomId      String?
  userId      String
  user        User          @relation(fields: [userId], references: [id])
  menu_orders Menu_order[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  notes     Booking_note[]
  @@map("bookings")
}

model OpenHours {
  id        String   @id @default(uuid())
  day       Weekday?
  startTime String
  endTime   String
  pricing   Float?
  // site      Site     @relation(fields: [siteId], references: [id])
  // siteId    String   @unique
  room      Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
  roomId    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("opening_hours")
}

model MenuItem {
  id          String       @id @default(uuid())
  item_type   MenuItemType
  name        String
  price       Float
  measure     String?
  site_id     String
  site        Site         @relation(fields: [site_id], references: [id])
  menu_orders Menu_order[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("menu_items")
}

model Menu_order {
  id         String   @id @default(uuid())
  booking_id String
  booking    Booking  @relation(fields: [booking_id], references: [id], onDelete: Cascade)
  quantity   Int?
  menu_id    String
  menu       MenuItem @relation(fields: [menu_id], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("menu_orders")
}

model Song {
  id        String   @id @default(uuid())
  artistName  String
  songName    String
  duration    Int?     // Duration in seconds, optional field
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("songs")
}

model Booking_note {
  id        String   @id @default(uuid())
  content   String
  metadata  Json?    // New field for structured data (optional)
  bookingId String
  booking   Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("booking_notes")
}

enum MenuItemType {
  DRINK
  FOOD
}


enum UserRole {
  CUSTOMER
  SUPERVISOR
  MANAGER
  STAFF
  GUEST
}

enum BookingStatus {
  AVAILABLE
  RESERVED
  PAID
}

enum Weekday {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}
